// Code generated by go-bindata.
// sources:
// data.json
// DO NOT EDIT!

package yi

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _dataJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xb4\x9a\xcd\x72\xe2\x4a\x96\xc7\xf7\xf5\x14\x8e\x5a\xf7\xe2\xd6\xb6\x5f\x65\x62\x16\x37\xa6\x2b\x66\x66\xd1\xdd\x11\xdd\x77\x71\x27\x26\x3a\x42\x02\x04\x92\x11\x5f\x36\xe6\x53\x18\x53\x16\x5f\xc6\x20\x61\x53\xb6\x10\x48\xbc\x8b\x9d\x27\x33\xb5\xaa\x57\x98\x38\x99\x42\x45\xd9\xb8\xa2\xea\x0e\x54\x38\x28\x24\x32\xf3\xe4\xe7\x2f\xff\xe7\x64\xfe\xef\xbb\x93\x93\xf7\x1f\xc4\xbf\xf7\x7f\x3e\xc1\xa7\x93\x93\xf7\xff\xfd\xb7\xbf\x7c\xfc\xfd\xfd\x9f\x4f\xde\x13\x4f\x79\xff\x27\xf9\xee\x6f\xbf\xfe\xf5\xa3\x78\xb5\x0c\xb7\xaf\x7e\xfb\xf8\xfb\x6f\xf1\xab\x2f\xeb\x16\x68\xe9\x67\x45\x25\xfe\xe8\x59\x51\x41\x1f\x3f\x2b\x2a\x5f\x5c\x3e\x2b\xa9\x6d\xea\x7f\xfe\xd7\xdf\xff\xb1\x4d\x4e\x3c\x1f\xec\xf1\x89\xf8\x76\x2a\x3e\xf3\xdb\x64\x7f\xf9\xf8\xcf\xff\xc0\x54\x7c\xde\x83\x50\x05\x7b\xfc\x65\x6d\x42\x79\x42\x2d\xe3\x49\xb1\x40\xed\x3f\x29\x1d\xd6\xca\xd0\x4c\x89\x2a\x9d\x2f\x6b\x33\x79\x49\x96\x5d\x36\x74\x89\xe7\x93\x65\x08\x85\x01\x6b\x65\xa0\x30\x80\xf0\xf1\x59\x49\x3d\x2b\xa7\x50\x19\xd1\xc6\x79\xd4\xce\xf2\xe1\xf5\xb3\x92\xff\xb2\x6e\x3d\x29\x16\x1f\x29\x60\x8f\xc9\x32\x4f\x82\x73\xb2\xea\x83\xda\x27\x9e\xcf\xaa\xa3\x2f\x6b\x93\x6f\xca\xbc\x67\x12\xaf\x40\x55\x07\x2b\xe0\x57\xc1\xac\xd1\xfa\x15\x1b\x3f\x7e\x59\x9b\xf4\x42\x03\xeb\x9a\xf8\x3e\xe8\x4d\xb2\xcc\x3f\x2b\x29\x7a\x7b\x47\x82\x0d\xf1\x7d\x7a\x7f\x21\xcb\x94\xe5\x60\x09\xdb\x37\x24\x38\x8f\xf3\x96\x0b\x4f\x4a\x83\x2c\xc3\x27\xa5\x29\xd3\x40\xb9\x20\xd2\x74\x9f\x94\xce\x4e\x97\x7d\xfc\xfd\xb7\x7f\xfc\x8a\x9d\xc1\xaa\x23\xb2\xc4\xe6\xf2\xa1\xca\x42\x3b\x0a\x9b\xb4\x7e\x15\x0d\x6a\xa2\x6f\x8c\x9d\x1c\xff\xf3\xeb\xdf\xdf\xff\xf9\xe4\xdf\xc4\xc3\x49\x3c\x9c\x72\x48\xff\xfa\xeb\x7f\x8a\xf1\x7b\xaa\x69\xbb\x7f\x71\xc6\x6f\xc7\x13\xc7\x04\xad\x11\xff\x13\x9a\xb2\x0c\x9a\xaa\xa2\x91\x38\xe9\xbf\xfe\xf4\xff\x2c\x7f\xd9\x21\x7e\xf5\xcb\xda\x8c\xae\x2f\xa3\xb0\x09\xd6\x28\x1e\x66\x7d\xcc\x87\x2a\xd8\x43\xe2\xfb\x87\x35\x07\xed\x36\x76\xbd\x5e\xe3\x8f\x69\xb0\x46\xd4\x3b\xc5\xc7\xfa\x15\x9c\x15\x0f\xdc\x2e\xcf\x10\x63\xd2\x86\x69\x99\xad\x74\x5a\xef\xe3\xec\xc6\xf5\x61\x82\x7d\x41\xd3\x17\x3c\xdf\x87\xa2\x71\x2c\xeb\xbe\x29\xe7\x88\xec\x55\x56\x75\x8f\xd7\xab\xa0\x77\xe4\x24\xa1\x81\x85\xe6\xf2\x1b\x56\x1d\xed\x96\x2f\xfe\xff\xf7\x77\xb1\xa5\xf7\xbf\x88\x7f\xfb\x18\xe3\x9b\x2f\x19\x03\x1d\xfb\x25\x63\x40\x4b\x0b\xb4\xa4\x40\x1f\x33\xa3\x13\x8d\x6f\xc9\x32\x2f\x01\x23\x7b\x1b\x67\x69\xd5\x83\x50\xc1\x26\x6b\x3a\xdf\xe0\x42\x85\xd0\x84\xb0\x4e\xbc\x95\xec\x87\x67\x25\xc5\xfb\x1b\x28\xd4\x21\xac\x53\x2b\x2f\xd6\x9e\x05\x66\x9d\x78\x43\x6a\xe1\x32\x86\x99\xc1\x17\x97\xdf\x2e\xa9\x84\x5b\xd0\xb1\x91\x5b\x96\x7b\x22\xbe\x9d\x8a\xcf\xb7\xb8\x65\xb9\x58\x9c\xe5\xf2\x20\x20\x5e\x8e\x19\x38\xbf\xc9\xb2\x0b\x25\x07\x39\x21\xde\x40\x70\x16\xb5\xca\xd8\x83\x86\x82\xf8\xe9\xd8\xd4\x32\x20\x38\x23\x5e\x91\xd7\x4b\x09\xe4\xb0\x9c\x8e\x0d\x85\x01\x6d\x38\x50\x75\x88\xa7\xb0\x56\x86\xf9\x4e\xd4\x58\x40\x61\x80\xd9\x1b\x0e\xc2\x2c\x77\x4f\xbb\x55\xc1\x0f\x55\x3e\x46\x9d\xa6\xe0\x62\x1e\x0a\x03\x2c\x44\xd3\x40\xcf\x92\xe0\x9c\x15\x5d\xe2\x67\xc1\x1e\x82\xe5\x22\xa8\xc2\x22\xf6\x4e\xff\x9e\x2a\xc3\xe4\x31\x6a\x2c\x68\xb7\x2a\x1f\x65\x05\x04\xb2\x31\x8b\xa8\xf0\x66\xb7\x5d\x51\xcf\x47\x40\xda\x63\x5a\x7f\xc0\xa2\xcc\x1a\x4f\xdd\x25\xbf\xca\x5c\xa0\x3d\x62\xeb\x66\x01\x14\x5b\xb8\x41\x98\x1a\xcc\x96\xcf\x8a\x4a\xa7\xd7\xac\xbd\xc0\x37\xb3\x12\xd8\x43\xf1\xc5\x88\x3a\x4d\xd6\xca\xf0\xb4\x47\x15\x31\x9c\xca\x1a\x07\x4c\xaf\x90\xd5\x2d\xf4\x03\xfc\x9b\x0e\xc8\xf2\xea\x0d\x52\x82\x36\x95\xc3\x4d\x5d\xef\xdb\x2d\xe8\x47\xe9\x78\xf2\x5d\x36\xca\xf2\x11\x8c\x7a\x83\xf8\xc5\x28\x27\xfa\x4f\x7b\xe0\x3d\x85\x15\x33\xd1\x2a\xf3\x73\xab\xec\x3b\xc6\x40\x9b\xc6\xa0\x5c\x65\xf8\xf5\xbd\x30\x93\x8e\x67\xe7\xa1\x0c\xc4\x68\xcc\xdf\x42\xfb\x2b\x14\x69\xfd\x8a\xdf\x1c\xd4\xcc\x16\x8c\x13\x36\xb9\x82\x92\xc3\x17\x97\x12\xc8\x64\x55\x64\xc5\x3c\xf1\xf3\xd2\x36\xd5\x71\x21\xb3\x95\x7e\xd8\x3e\x44\x2c\xb2\xf6\x82\xd6\x96\x60\x0f\xe5\x96\x4b\x96\x57\xd2\x24\x6e\xbf\x02\x0d\x07\xb2\xa7\x77\xc4\x04\x69\xc1\xbc\x1f\x59\x16\x36\xba\xd3\x82\xac\xcb\x73\xf7\xdf\xa1\xe3\x87\x5f\x7e\xf9\xe5\xc3\x5e\x3a\x7a\xc6\x2b\x3a\xce\x9d\xfd\x74\x8c\x61\x2f\xa1\x28\x78\x9c\x40\x51\x82\x13\x56\x3e\x09\x9d\x7d\x6c\xa3\xee\x22\x6a\x3f\xc2\xdc\x39\x81\x4e\x91\x78\xa7\x91\x95\x7b\x93\x6d\xc4\xcf\x33\x63\x8c\x02\x4b\xef\xb0\x6a\x17\x71\x55\x36\xf9\x69\x80\x36\xe6\x0e\x57\x34\xec\x6c\x03\x15\x4f\x9c\x60\xd9\x45\x85\x74\xa1\xe1\xaf\x92\x8e\xe2\x3d\xa6\x4f\x97\xd8\xb0\x00\xd3\xb2\x2c\x01\x33\x5e\x2d\xc0\xea\x72\xc5\x84\x9c\x8f\x7b\x59\xd9\x14\x29\x55\xf9\x1e\xec\x16\xb5\x0c\x6e\xb8\x51\x2b\x4c\xc0\x29\xa5\x61\xd4\x0a\x05\xed\x0c\xd1\x54\x69\x17\xeb\x89\x64\x0a\xce\x61\xed\xd3\xab\x25\xb4\x7d\x6a\xdd\xc6\x92\xab\xe4\xf0\x60\x05\xa7\xb8\xa7\x90\x20\x4b\xa7\x36\xad\x3f\x90\x65\x97\x36\x1c\x56\xcc\x73\x45\x83\x95\x0f\xa7\x5d\x36\xc9\x13\xaf\x85\x30\xae\x3f\x80\x90\x6b\x31\xad\xfd\x2a\x77\xfa\x38\xb4\xb3\x16\xd9\xf4\x60\xf3\x99\xf8\x38\xb3\xd8\xd0\xa1\x97\x2a\xdf\xb4\xa1\x54\x4b\x0c\xc1\xcc\x80\xb9\x86\x73\xcd\xcf\x1f\x09\x47\x64\xd9\x88\xc6\xb7\xac\x34\x85\x41\x0a\x2b\x79\x7f\xcd\x7b\x0a\x7d\xe8\xc2\x20\x75\x0c\xe5\x06\x73\x07\x89\x97\x2d\xe1\x77\x17\x3f\xe5\xbe\xf9\x65\xdd\x96\x2b\x0c\x1f\x73\x0f\x87\x07\xd5\xcb\x76\xce\x53\x30\x6e\xc1\x4d\x88\xa3\x1e\x2a\xa2\x06\xc7\x58\xd4\x09\xc0\x0a\xf7\xd1\x72\x83\x78\x6c\x0a\x80\xa5\xbb\xa0\xf5\x89\x5f\xa4\x97\x75\xe2\x4d\x13\xe9\x07\x39\x51\x83\x41\x8a\xeb\x05\x21\x43\x14\x28\x77\x0e\x8f\x34\x1c\x85\x41\x2a\x4a\x69\xb2\x33\x76\xfb\x06\xfb\xc3\xbc\x01\x27\x87\xc9\x92\x1e\xea\xdf\xe3\x5a\x5b\x5c\x62\xe5\xa6\x75\xd1\x1e\x15\x96\x0b\xb2\x4c\xc3\xb4\x7e\x0c\x71\xc8\xae\xcb\xb4\x77\x2e\xc1\x04\x73\x2d\x66\xd3\x2e\x89\xde\x92\x8b\x82\x88\x7b\x80\x08\xed\xf6\x4b\x20\xf2\xb3\xe6\x2b\x97\x54\x6a\x45\xf3\x86\xea\x15\x3a\x4f\xb1\x49\x9f\x9f\xe1\xe2\x95\x5f\xe8\x3c\x45\xf5\x4a\x0c\x8a\xe9\x0c\x2a\xb8\xf3\x41\xb6\x40\x3c\x83\x7a\xb8\x9b\x53\xaf\x88\xae\x9d\x57\x80\xca\xa9\xac\xf0\x1b\xbe\x2c\xcc\xe7\xd4\x5d\xf0\xb3\xe6\x09\x37\x66\x42\x13\x16\xf7\x71\x13\x7f\xf3\x61\x3e\x17\xbb\x41\x91\x78\x3e\xbd\x17\xb3\x69\x3e\x27\x5e\x1e\x72\xf8\x88\x88\xbc\x37\xa8\xbb\x80\x61\x9e\x7e\x56\x21\xb7\x4d\xaf\x37\x61\xa3\x81\x9b\xa5\x5e\x99\xce\x73\xb8\x41\xce\xbb\xf4\x0e\xc5\x00\x9d\x5e\xe3\x14\x3b\x6b\xb2\x51\x8b\x7a\x65\x28\x0b\x57\xb5\xa4\xcb\x62\xa9\x65\x44\x4d\x21\xc0\xda\x57\x68\x51\x3c\x82\x6a\xd1\xe9\x27\x6c\x98\x51\x48\x58\x86\x3d\xd2\x18\xa2\xab\xda\x40\xb1\x27\xf9\x0e\xa5\x0a\xcc\x2f\x24\xe5\xa9\xd5\x8d\x1a\x0f\x74\xf6\x19\x4b\xdb\x68\x2c\xf3\x20\xb3\x7c\x45\xf0\x45\x93\xa7\xee\x50\xa0\x06\xe7\x70\xda\x23\xcb\x3c\x55\xfa\x98\xb8\xbb\x04\x6d\x05\xd3\x01\xab\x76\x99\xef\xd0\xe9\x35\xfa\xad\xa9\x1b\x2c\xf6\x5c\xe5\x8b\x91\x94\xaf\xf4\x6e\xc5\xcf\xd0\x93\x8e\xd4\xf3\xa3\x39\xb3\x90\x5b\xc9\x39\x20\xd9\x80\x03\x22\x57\x87\x3e\x86\xb0\x07\x4e\xee\xf0\xb2\x2d\x99\x76\x47\xd1\x6c\xd0\x76\xb7\xa5\x1f\x96\x2d\x92\x74\x42\x40\x40\xa9\x06\xfd\xfb\xd8\xa9\xcc\x55\xc0\x9e\xc4\x41\x0d\xcb\xe0\xfe\x2d\xce\xd9\xfa\x15\x2a\x8c\x9f\x65\xed\x8f\x79\xb2\x60\x6a\xbb\xfd\xc7\xfc\x7b\x18\xe4\x92\x47\xe4\xac\x96\x87\xd9\x01\x77\x99\x58\xbb\x99\x50\xaa\xc4\x86\xf5\x31\xf6\x82\x5e\x21\x3e\xca\x11\x56\x1d\x71\x67\x41\x7b\x45\xfa\x09\xf7\x3c\xd4\x01\xaf\xd0\xfe\x52\xd9\x7d\xf8\xf0\x86\xb2\xf3\xab\x2f\x41\x16\x59\xca\x4b\x90\xa1\xd3\x34\x6d\x09\xe5\x6f\x48\xa8\x6d\x37\x5a\xe1\xe1\x3c\x18\xe8\x5e\x3d\x76\xde\xd0\x74\x60\x8f\x23\x4b\x89\x35\xdd\xfe\x38\x1b\x9b\x1a\x10\x6a\xb8\x62\x33\x25\x5c\xfc\xdb\xe0\x5c\x82\x2a\xe2\x57\x44\x28\xa8\x42\xdd\x2a\x2a\xc3\x76\x96\xf8\xc5\x38\x41\xa8\xd1\xfa\x43\xd4\x2c\x44\x6d\x19\xec\xf2\x23\x0b\xa5\x66\x64\x29\x52\xe8\x45\x96\x02\xa1\x86\x43\x67\x8c\x41\xef\x48\x54\x89\x8c\x75\xd0\x56\x5c\x31\xa9\x5e\x96\x84\xa2\x53\x1b\xdd\x63\x11\xe8\x93\xb9\xa2\xfe\x2c\xba\xee\xee\xba\xc1\xf8\xbe\x30\x60\xab\xa6\x74\x05\x11\x22\x65\x87\xd9\x3e\xb5\x94\x28\x57\xe0\x03\x15\x13\x37\x1c\xdc\x9d\x67\x3e\x58\x23\x38\xbf\x89\x72\x66\x94\x0e\xf8\x40\xe5\x4a\x19\x36\x69\xd9\xd8\x5d\x97\x35\x52\x71\x77\x22\x6b\x9f\x5a\x3e\xaa\xce\xd3\x18\x49\xc4\xf7\x91\x59\xad\x0c\xfa\xdb\xc3\x02\x6d\xfa\x54\x1b\x1e\x49\xbb\x49\x09\xc1\xc6\x0b\x34\x6d\x19\xc4\x2b\x44\x0a\xaa\x57\x98\x7d\x22\x9e\x41\x7c\x9f\x76\xfa\x22\x72\x78\x8b\x92\x76\xa5\xff\x34\x4d\x7e\x30\x1a\x67\x29\xe8\xce\x6a\x67\xd1\x75\x37\x11\x74\x87\xc7\x96\x34\xc3\x7b\xc2\xb3\xcf\xf9\x3c\x77\xc3\xc6\x8b\x63\x44\xe1\xa4\x21\x7a\x8f\x7d\xc7\x73\x0b\x70\x72\x2f\x7c\xb0\x43\x61\x2a\x36\x74\xd7\x94\x62\x18\xd9\x38\xc2\xd6\x1d\x7c\xa8\x12\x59\x15\x0f\x55\xfa\x34\x41\x14\x55\xcf\xf6\x06\x15\x5f\xcb\xaa\xfd\x91\x7e\xd0\xa6\xaf\x64\xd5\x6c\xbd\x9f\x46\xec\xe6\x8c\xa6\x2f\xc4\x82\x9f\x4a\x14\x61\x4b\x85\xda\x7f\x11\x6c\x94\x5b\xed\x77\x29\x05\xf6\x18\x15\xd4\x6c\x1d\x9f\x06\xbc\xa1\xa0\x62\xcf\xd3\xe0\x33\xff\x59\x51\xb9\x63\xf0\xd9\x7a\x2f\xae\xa8\xbb\x10\x41\xa7\x31\xef\x6f\x78\x70\x4b\xbc\x22\x75\x17\xc4\xb3\xe8\x67\x95\xa7\x4d\x28\x57\xb8\x62\xf2\x9e\xd8\x5d\xd2\x25\xe2\xfb\xc4\x2b\x8a\xcf\x02\x9c\x99\x5c\x31\xd1\x44\x28\x02\x85\xb3\xf5\x57\xa3\xe1\x58\x9a\x96\x21\x0c\x69\x9d\x2c\xf3\xb1\xb7\x19\x9c\x0b\xed\x74\x8e\x25\x0c\xaf\x65\x10\x8c\x84\x1b\xb2\x6e\x81\xb3\xe6\xb9\x45\x52\x5b\xe9\x34\x52\x23\xc4\x7e\xb4\x87\x10\x3e\x82\x3d\xa4\x46\x01\x31\xe3\xfb\x7c\xd3\xe6\x3d\x13\xb2\xf7\xb4\x36\x95\xbb\x2c\x1f\xa8\x91\x72\x09\x6b\x1f\xb2\x67\x51\x73\x7c\x2c\x69\xd4\xa2\x7a\x2d\xaa\xa2\x6a\x8b\x2e\x1f\xc0\x1b\xc8\x01\xa5\x16\xae\x23\x6e\x4f\xe4\x09\xc7\xa1\x71\xd3\xe2\xb3\xf5\x1f\x0c\x68\xfd\x58\xb4\x1f\x87\x54\xcb\xc7\x56\xec\x02\xad\x7f\x82\x4a\x40\xbd\xce\xcb\x30\xef\x61\x65\x53\x74\xdd\xa5\x75\x1c\xd9\x98\xa0\x45\x63\x17\x04\x54\xaf\x41\x78\xfe\x22\xe0\x75\x0c\x24\x7d\xd3\xf8\xe0\x8c\x2b\x66\xa4\x88\x00\xb7\xf6\x10\xa5\x2a\x62\xc2\x1b\xac\x19\x52\xfd\x51\x56\x83\x59\xad\xc3\xab\x28\x5c\x15\xae\x87\x1e\x82\x68\xed\xf7\xd1\xb8\xcf\xff\xdb\x1f\x10\x4b\xbf\x0a\x88\x79\xfa\x4b\x50\x09\x1f\x57\x27\xbe\x9f\x44\x04\x62\x2e\xbe\xc2\x8f\xe5\xa2\x4e\xf2\xf4\x24\xa8\xbf\x0f\x3f\x49\xe8\xff\x25\x66\x2c\x97\x78\x53\x6a\xa1\xdf\x26\xe3\xfd\xc4\x9b\x92\x75\x5d\x06\xc1\x78\x71\xc2\x37\x39\xdc\x1a\xe4\xaf\x9e\x8e\x72\x6a\x8d\x7e\x77\x94\x1e\xc1\xfc\x12\xb4\xcf\x70\x3d\x21\xeb\x3a\xd8\xad\x5d\xa1\x43\x4d\x11\x17\x6f\x65\x9e\x14\x8b\xac\x54\xb2\x34\x50\x0d\x78\xfa\x93\x38\xf2\xa4\x46\x01\x4a\x0e\xad\xae\xc8\xba\x0c\xf6\x98\x78\x79\x12\x6c\x58\x33\x84\xe1\x39\xb5\x0a\x64\x55\x94\x42\x15\xb4\xcf\x3c\x6d\xf1\x45\x17\xac\x11\xd6\x21\x3f\x06\x37\x1b\x29\x06\x78\x58\x37\x6a\xaa\xa8\x99\x14\x95\xea\x65\x89\x1f\xb6\xea\x62\x7d\x4a\x0e\x2f\x3e\x42\xd9\x60\x7d\xb1\x6f\x6e\x9a\xf4\xea\x91\x1a\x05\x7a\xd7\xa3\x96\xc1\xd4\x90\xf5\xbd\x63\xc9\x20\x7b\x08\xe5\x36\xa2\xb1\x12\xe0\xe3\x5a\x81\x76\x40\x8d\x0d\xcc\x1e\xe4\xec\xc1\xe1\x7c\x75\xcc\x74\x20\x4f\xad\xea\x62\xf3\x06\x81\xdc\xc3\xa8\x31\x94\xf3\x34\x99\x38\xd1\xc5\x06\xfd\x0d\x4f\x03\x4f\x17\x95\xeb\xc2\xb4\xcc\xf5\x2c\xb8\xde\x11\xa3\x5d\xe0\xe9\xf0\x38\xa0\xb7\xbd\x3f\x78\x60\xf8\x43\x8e\x9e\xa7\x53\xbd\x96\x34\xe5\xa7\xdb\xf1\x83\xae\x9c\x35\x12\xf3\x7f\xba\xbb\x20\xb1\xe3\x8b\x79\xe2\x19\x51\xb5\x07\x95\xe0\x08\x7e\x9c\xa7\x43\xce\x17\x6e\x9a\x20\x50\x79\xc0\x73\xc3\x17\x2d\x7c\x09\x9e\xb7\x22\xf1\xa0\x4d\x5e\x82\x87\x3a\xd5\x57\x91\x78\xe9\x9a\x16\xbb\x6c\x3a\x93\xdb\x1b\xb6\x56\x1c\x44\xed\x8e\x21\xf2\x79\xa6\xd2\xda\x52\x4a\x7b\x28\x17\xc1\x9e\xc4\x15\xdb\xe7\xc7\x59\x2e\x75\xaa\xb1\x1f\xb7\xff\xdc\x91\xf8\x77\xd4\xa9\x0a\x4f\xed\x0e\x9c\x2c\x6b\x65\x78\xa8\x91\x00\x77\x17\xc8\xde\xbd\x4d\xaf\xd3\x84\x5e\x68\x27\xac\x83\xe5\xa2\x42\x3a\xcf\xa0\x77\xf6\x59\x95\xc9\x20\xac\xa3\x48\x53\x4c\xda\xad\xe2\xe7\x83\x38\x77\x44\x5d\x55\xc4\x42\x84\x45\x5a\xbf\x8a\xea\xa2\x1c\xa7\x1a\xf3\x0f\xfd\x4a\x74\x25\xc0\xc9\x26\x87\x00\xf8\x6b\xac\xab\x44\x2e\xa7\xca\x85\x87\x08\xc1\x9a\x4e\x6d\x9e\x0e\x76\xdf\xa3\x73\x90\x79\x48\x68\x44\x82\x2c\xf8\x55\xf9\x13\x3a\xa1\x33\x5d\x92\x12\xda\xe8\xbb\x21\x39\xc2\x47\xd6\xca\x44\x17\x1b\x59\x01\x64\x5e\x0d\x1b\x42\x56\xc5\x23\x41\x8b\x3a\x55\xf4\x9d\x93\xdb\x18\x87\x5f\x3d\x55\xe1\x90\x86\x72\x70\x59\x31\xcf\xaa\x23\x5c\x31\x63\x11\x1c\xb4\xe7\x60\x14\xd8\x00\x79\xb9\xdd\xd7\x0b\xdc\x99\x1c\x2d\xe4\x64\xd7\x64\x83\x8f\xe2\x1f\x4a\x1e\x49\x03\x60\xde\xfc\xf4\x7d\x85\x1f\x09\x99\xcb\xd2\x79\xee\x06\xb2\xda\x11\x1a\xb1\x05\x8f\x74\x94\x92\xbe\x4a\xd6\x7d\xec\x40\xb5\x75\xb6\x7e\x88\x65\x76\xa7\x2f\x0e\xc6\xd3\xaf\xc7\x6c\x97\x4c\xef\x24\x9b\x3e\xec\x17\x45\x50\x50\xf7\x84\x93\xb8\x3b\x78\x23\x2e\xbe\xbd\x31\x11\x1f\xb4\xee\x11\x45\x30\x9f\x73\x77\x10\x8b\x22\x11\xbf\x7e\xc3\x27\xe3\xee\x80\x37\x5b\xe8\x93\xb9\x83\x48\x39\x45\xcf\xc9\x98\xc5\xc7\x7c\xf3\xb9\x38\xe1\xff\x24\xb8\x63\xef\xdc\x8c\x50\xa3\x9e\xbf\x2b\x9f\x44\xca\x14\xcc\xe7\x24\x38\x8f\x26\x8d\xf8\x90\x36\xc8\xe2\xae\x81\x69\xb0\x0f\xa3\x49\x03\xe9\xe0\xc9\x6b\x1b\x79\xee\x0e\x70\x20\xe7\x3d\xcc\x58\xa8\xa0\x0a\x5a\xe6\xe5\x19\x0c\xbf\x58\x80\xf6\x00\x8b\x5c\x34\x69\x88\x28\xbb\xce\xfd\x5b\xe2\xe5\xe3\xfb\x08\x9a\xd4\x85\x45\x78\x9c\x7f\x0d\x81\xbb\x83\x6f\x9b\x93\x82\x41\x0a\x79\x24\x1e\x05\x01\x35\x66\x8c\x9f\x15\x15\x10\x3d\xf9\xaf\x19\x1d\x8f\xf8\xf9\xa8\xe7\xcb\x10\x28\x09\xb2\xb4\xe1\x40\xe9\x06\x1b\x25\x7b\xd9\x28\xf0\x74\x00\xc3\x3c\x5b\xe9\x64\xd3\xa1\x66\x6c\x82\xb5\x32\x2c\x2c\xca\x0b\x6a\x47\xb9\x9f\xe0\x5d\x73\x77\x90\xc4\x07\xd0\xb3\xf4\x74\x08\xd5\x28\x55\x81\xf6\x01\xb7\xda\xad\x82\xc2\x1d\xcd\x11\x11\x51\x74\x31\x56\x89\x61\x12\x7e\x26\xeb\xf2\xb1\x4e\xe5\xe2\xdb\x0b\xdb\xa2\xf1\x7b\x61\xc1\xdd\xc1\x51\x6e\x75\x9d\xde\x73\x77\x20\x47\x55\x2e\x71\xb6\xd2\x0f\x4f\xda\x38\xa6\xb4\x1d\xbe\x63\x11\x0a\x67\xe1\x4e\x6b\x58\x75\x94\x84\x69\xbe\x4f\x22\xa9\x91\x3e\xbc\xc5\xa1\x7d\x81\xa4\xf9\xe4\x95\x4c\xda\x1e\x01\xca\x79\xb9\x0f\x42\x51\xfb\x11\xb5\xc8\x7c\x72\x22\x2e\x23\x7c\xff\xba\xd5\x99\x49\x96\x65\x5c\x9d\x35\x8b\xa6\x06\x22\x56\x9c\x23\x9e\x1f\xb5\x1f\x25\x7b\x12\xfd\x13\xb5\x1f\x59\xb5\x8b\xe2\x41\x3e\x7e\xca\x30\xdb\xa7\x8d\x3e\xd8\x63\xda\xe9\x13\x6f\x91\xdc\x58\x8a\xac\x9c\xbc\x1d\x40\x1b\x7d\x9a\x29\xb1\x76\x91\x65\x84\x23\x22\x4c\xd0\x8c\x01\x9b\x49\x7c\xaf\x21\x5d\x92\xd5\xd8\xbe\x54\xe9\xed\xa7\x17\xf5\xd9\x6b\x82\x9a\x0e\xf4\x85\x30\xd5\x34\xba\xea\x6d\x13\x27\xd9\x53\xf2\x56\x02\xe8\x63\xac\xb0\xe8\x2f\x79\x1f\x41\x64\x59\x80\xf6\x99\x04\x16\xd5\x1b\xc7\x72\xc8\xb2\x7d\x3e\x9f\x88\x7b\x3a\xe2\x7a\x9d\x88\x9d\x1c\xc1\x0d\x11\xfc\xe0\x8b\x4b\x56\x13\x97\x3a\xd4\x33\xe2\x15\xe8\x74\x75\x8c\xa0\x10\xab\xce\x65\x93\xc0\x1e\x0a\xbd\x58\x8f\x8f\xba\x6a\x15\xb1\x3b\xe7\x59\xbb\xc0\xdc\x9b\xc3\xab\x1a\xd6\x8e\x0d\xd3\x94\x68\xed\xa6\xfb\x47\xae\xd5\xfe\x08\x39\xc8\x2a\x4f\xfc\x22\xeb\xde\x4b\x28\xcb\x5b\xa8\x47\x04\x09\x92\x4a\x76\xe9\x5b\x7e\xd5\xbb\x7f\xbd\xfb\xbf\x00\x00\x00\xff\xff\xb7\x8b\xa4\xfe\x67\x2e\x00\x00")

func dataJsonBytes() ([]byte, error) {
	return bindataRead(
		_dataJson,
		"data.json",
	)
}

func dataJson() (*asset, error) {
	bytes, err := dataJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "data.json", size: 11879, mode: os.FileMode(420), modTime: time.Unix(1521112379, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"data.json": dataJson,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"data.json": &bintree{dataJson, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

