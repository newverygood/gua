// Code generated by go-bindata.
// sources:
// data.json
// DO NOT EDIT!

package yi

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _dataJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xb4\x54\xcd\x6e\xdb\x46\x10\xbe\xfb\x29\x08\x9d\x73\x50\xaf\x7e\x95\xa2\x07\xa3\x31\x8a\x1e\x92\x1e\x9a\x43\x8a\x22\x00\x45\x8b\x36\x69\x52\xb2\xec\x2a\x92\x6a\x52\x71\xe4\xea\xc7\x0a\xc3\x8a\x44\x14\x69\x4d\x4a\xf4\xbb\x84\x33\xbb\xcb\x93\x5e\xa1\x18\x92\x76\xdd\x5a\x97\xa2\x0a\x20\x80\x3b\xb3\x33\xfa\xe6\x9b\xd9\xf9\x7e\xdd\x53\x94\x4a\xb5\xfa\x4d\xb5\x5a\xad\xec\x2b\x64\x29\x4a\xe5\xc7\x97\xcf\x0f\x5f\x57\xf6\x95\x0a\x36\x6a\x10\xb5\x2b\xcf\x0a\xf7\xcb\x83\x17\x87\xe4\x95\xc1\xf8\xde\xf5\xfc\xf0\xe7\xef\x4b\x17\x36\xc6\x9b\x95\x2d\xc3\x01\x26\x35\x19\x8c\xe5\xef\x97\xa9\x4a\x87\x4c\x3d\x4d\x55\x4d\x9a\x7f\x16\x57\x18\x86\xa9\x5a\xe3\xfe\xf5\x66\x65\x63\x7f\x58\x3a\xdd\x20\x55\x6b\xd9\x20\x22\xa7\x1b\x00\xf3\xb9\x6b\xe6\x91\x1a\x86\x21\xac\x7f\xcb\xbc\x1e\x0e\x27\x9b\x95\x0d\xeb\x63\x74\x6f\xf2\x18\x6b\xb3\xb2\x33\xaf\x27\x8f\xd6\xc5\x19\x98\x25\x83\x31\xdc\x5a\x32\x1c\x50\x62\xe3\x1c\x98\x05\xb7\x16\x30\x9f\x0a\x7b\x3b\x47\x7d\x81\xf3\x93\xcc\xeb\x11\x4a\x68\xc8\xe8\x23\x30\x4b\x98\x53\x32\x75\x03\xa2\x08\x5b\x4d\x5c\x86\x9b\x95\xcd\x4d\x15\xe2\x11\xb1\xf8\x07\x1d\x0d\xc7\x1a\xf7\x87\x85\x89\x6e\x80\x89\x2e\xcc\x69\xaa\xd6\x30\xd1\x21\xb2\xfe\x4e\x9c\x31\x88\xac\x6c\x10\xa1\x31\x4d\x55\x0d\xd6\xc7\xbc\x37\xc3\xb3\x0f\x44\xaa\xe5\xa0\xdf\xe2\x66\x43\x1e\xad\x71\x62\x89\xd8\x80\xbb\x3e\xb7\x4b\x08\x71\x59\x17\x49\x13\x93\x65\xaa\x6a\xf7\x2d\xfe\xe5\xe0\xa7\xca\xbe\xf2\x6d\x6e\x28\xe5\x84\x8a\x29\xbd\x38\xf8\x21\x9f\xc7\x97\x8e\xfe\xa5\xa3\x2b\xc5\xa7\x4c\xcb\x23\x5e\x1d\xbe\x7e\x45\x01\xc0\x4e\x51\xa7\x26\x64\xec\x0f\x19\xd0\x98\xd0\x98\x8a\xf6\x8d\x1c\xd8\xc8\x0c\x4c\x6a\x99\x76\x8e\xce\x9a\x40\xcb\xe4\x37\xcf\xfe\x0f\x1e\xea\x3e\x44\xed\x7c\x24\x0d\x9c\xd9\x10\x8f\x50\x5f\x64\x5a\xfc\x00\x0c\xc9\x67\x58\xb5\xa8\x5f\xdd\xf7\x14\x93\xb7\x69\x67\xd8\xe8\x38\x8f\xff\x9a\xce\x8d\xb9\x0c\xc6\xff\x0d\xe3\xe1\xb7\xb5\xa3\xb7\x7d\x60\x26\xf1\x39\xfd\x44\x6f\x3f\x9f\x2a\x01\xb9\xa6\x88\x0d\xf2\xb7\xcc\xdd\xb6\xd3\x7e\x3c\x3e\x39\x7f\xb7\x53\x00\xa3\x5f\xbc\x0f\x7a\x85\x8f\xd8\x88\xf6\x0d\x5f\x98\x38\x9c\xe0\xb2\xff\x94\x53\xfe\xfd\x6e\xaf\x04\xaf\x54\x73\x15\xd9\x2e\x22\xa8\xfb\x4f\x44\x24\xf4\x9e\x88\x48\xe8\x3d\x16\x11\xbc\xb0\xe1\xb6\x45\xdb\xd5\x71\xb9\x46\xd3\xcb\xdc\x13\x60\x51\xe6\x2c\x0b\xed\x00\x16\xa1\x1b\x50\x5f\x9c\xa5\x68\x5f\x41\xd4\x2c\xcd\xeb\xba\x18\x46\xbc\x37\xc2\xe1\x94\xf7\x47\xc0\xe6\x14\x3f\x9c\xa0\x1b\x64\xee\x09\x9e\xde\xa4\xaa\xc6\x7b\x23\x5e\x3f\x13\x4e\x53\xd4\x17\x74\x9b\x43\xf0\xba\x89\x77\x1e\xdd\xbe\xd5\xf1\xe8\xac\x28\xe3\xde\x59\xe3\x1f\xaf\xff\x55\xcf\x56\x08\x6e\xcf\x70\x64\xe5\x9a\xa2\xf3\x78\x70\x1f\xfc\x90\x4e\x0a\xc2\xbb\x0b\x34\xa6\x54\x70\x1c\x41\x32\x13\x9e\x05\xec\x32\x4f\x99\xa3\xfe\x19\xd6\x2e\x37\x7a\x5f\x49\x02\xf0\x78\x24\x43\x8f\x9e\xaa\xd1\xe2\xae\xc9\x59\x9f\x4a\xea\xbe\xc7\x8b\xe6\xee\xf7\x5f\xce\xdf\x89\x4e\x42\x60\xb5\x0b\x60\x0d\xee\xc7\xbb\xdd\xc1\x62\xd3\x45\x3b\x2c\x28\xe1\x70\x42\x12\x9b\x74\xe9\x6c\xdd\x89\xce\x39\x71\x73\x2d\xe1\x34\x44\xf0\x61\xa7\xf4\xf2\xe5\x17\x4e\x09\xcc\xb5\x9c\xed\xdd\x15\x75\x54\x6b\xef\x7e\xf3\x21\xb6\x20\x6a\x8a\xab\x4f\x85\xa8\x8a\xd8\xe0\xdd\xd1\x57\x14\x02\x52\x9a\xa2\xa5\x27\x8b\xed\x3b\xbf\xf7\x66\xef\xaf\x00\x00\x00\xff\xff\x84\x18\x55\xf1\x3c\x08\x00\x00")

func dataJsonBytes() ([]byte, error) {
	return bindataRead(
		_dataJson,
		"data.json",
	)
}

func dataJson() (*asset, error) {
	bytes, err := dataJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "data.json", size: 2108, mode: os.FileMode(420), modTime: time.Unix(1521025747, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"data.json": dataJson,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"data.json": &bintree{dataJson, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

